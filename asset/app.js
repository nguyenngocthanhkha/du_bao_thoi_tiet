document.addEventListener("DOMContentLoaded", () => {
  fetchWeather("Hanoi"); // m·∫∑c ƒë·ªãnh khi m·ªü trang

  // T√¨m ki·∫øm theo t√™n th√†nh ph·ªë
  document.getElementById("search-form").addEventListener("submit", (e) => {
    e.preventDefault();
    const city = document.getElementById("city-input").value.trim();
    if (city) {
      fetchWeather(city);
    }
  });

  // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i (m·∫∑c ƒë·ªãnh l√† Quy Nh∆°n)
  document.getElementById("geo-btn").addEventListener("click", () => {
    fetchWeather("Quy Nhon");
  });
});

// Map t√™n ti·∫øng Vi·ªát sang chu·∫©n ti·∫øng Anh cho OpenWeather
const cityMap = {
  "h√† n·ªôi": "Hanoi",
  "hn": "Hanoi",
  "th√†nh ph·ªë h·ªì ch√≠ minh": "Ho Chi Minh",
  "h·ªì ch√≠ minh": "Ho Chi Minh",
  "s√†i g√≤n": "Ho Chi Minh",
  "ƒë√† n·∫µng": "Da Nang",
  "h·∫£i ph√≤ng": "Hai Phong",
  "c·∫ßn th∆°": "Can Tho",
  "b√¨nh ƒë·ªãnh": "Binh Dinh",
  "quy nh∆°n": "Quy Nhon"
};

// ====== H√†m updateUI ======
function updateUI(data) {
  // ƒê·ªìng h·ªì
  function updateClock() {
    const now = new Date();
    document.getElementById("clock").textContent = now.toLocaleTimeString("vi-VN");
  }
  if (!window.clockInterval) {
    window.clockInterval = setInterval(updateClock, 1000);
  }
  updateClock();

  const current = data.current;
  const weather = current.weather[0];

  document.getElementById("location-name").textContent = current.name;
  document.getElementById("temp").textContent = Math.round(current.main.temp) + "¬∞C";
  document.getElementById("desc").textContent = weather.description;
  document.getElementById("humidity").textContent = "ƒê·ªô ·∫©m: " + current.main.humidity + "%";
  document.getElementById("wind").textContent = "Gi√≥: " + current.wind.speed + " m/s";
  document.getElementById("date").textContent = new Date(current.dt * 1000).toLocaleString("vi-VN");

  // Icon hi·ªán t·∫°i t·ª´ weather.php
  const iconEl = document.getElementById("weather-icon");
  if (iconEl) {
    iconEl.src = data.icon;
    iconEl.alt = weather.description;
  }

  // üëâ G·ª£i √Ω trang ph·ª•c & Nh·∫Øc nh·ªü ng√†y mai
  document.getElementById("suggestion").textContent = data.suggestion || "‚Äî";
  document.getElementById("reminder").textContent   = data.reminder || "‚Äî";

  // Forecast 5 ng√†y
  const forecastList = document.getElementById("forecast-list");
  forecastList.innerHTML = "";

  const daily = {};
  data.forecast.list.forEach((item) => {
    const day = new Date(item.dt * 1000).toLocaleDateString("vi-VN");
    if (!daily[day]) {
      daily[day] = item;
    }
  });

  Object.values(daily).slice(0, 5).forEach((item) => {
    const fIconUrl = `https://openweathermap.org/img/wn/${item.weather[0].icon}.png`;

    const el = document.createElement("div");
    el.classList.add("forecast-item");
    el.innerHTML = `
      <span>${new Date(item.dt * 1000).toLocaleDateString("vi-VN")}</span>
      <img src="${fIconUrl}" alt="${item.weather[0].description}">
      <span>${Math.round(item.main.temp)}¬∞C</span>
      <span>${item.weather[0].description}</span>
    `;
    forecastList.appendChild(el);
  });
}

// Hi·ªÉn th·ªã l·ªói
function displayError(message) {
  document.getElementById("location-name").textContent = "L·ªói t·∫£i d·ªØ li·ªáu";
  document.getElementById("temp").textContent = "";
  document.getElementById("desc").textContent = message;
  document.getElementById("humidity").textContent = "";
  document.getElementById("wind").textContent = "";
  document.getElementById("date").textContent = "";
  document.getElementById("forecast-list").innerHTML = "";

  const iconEl = document.getElementById("weather-icon");
  if (iconEl) iconEl.src = "";
}

// L·∫•y th·ªùi ti·∫øt theo t√™n th√†nh ph·ªë
async function fetchWeather(city) {
  try {
    let normalizedCity = city.trim();
    const key = normalizedCity.toLowerCase();
    if (cityMap[key]) {
      normalizedCity = cityMap[key];
    }

    const res = await fetch(`weather.php?city=${encodeURIComponent(normalizedCity)}`);
    if (!res.ok) throw new Error("L·ªói k·∫øt n·ªëi server");
    const data = await res.json();
    if (data.error) throw new Error(data.error);
    updateUI(data);
  } catch (err) {
    console.error("L·ªói:", err.message);
    displayError(err.message);
  }
}

// L·∫•y th·ªùi ti·∫øt theo t·ªça ƒë·ªô
async function fetchWeatherByCoords(lat, lon) {
  try {
    const res = await fetch(`weather.php?lat=${lat}&lon=${lon}`);
    if (!res.ok) throw new Error("L·ªói k·∫øt n·ªëi server");
    const data = await res.json();
    if (data.error) throw new Error(data.error);
    updateUI(data);
  } catch (err) {
    console.error("L·ªói:", err.message);
    displayError(err.message);
  }
}
